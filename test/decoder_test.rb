require "./lib/paramorse"
require "./test/test_helper"

class TestDecoder < Minitest::Test
  def test_decoder_exists
    decoder = ParaMorse::Decoder.new

    assert_instance_of ParaMorse::Decoder, decoder
  end

  def test_decoder_properly_splits_letters
    decoder = ParaMorse::Decoder.new
    word = "1011101110001110111011100010111010001110101"
    expected = ["101110111", "11101110111", "1011101", "1110101"]
    actual = decoder.split_morse_letters(word)

    assert_equal expected, actual
  end

  def test_decoder_splits_larger_words
    decoder = ParaMorse::Decoder.new
    word = "11101110001000111000101110001011101010001011101010001010001110101110100010111000!"
    expected = ["1110111", "1", "111", "10111", "101110101", "101110101", "101", "11101011101", "10111", "!"]
    actual = decoder.split_morse_letters(word)

    assert_equal expected, actual
  end

  def test_decoder_decodes_entire_word
    decoder = ParaMorse::Decoder.new

    assert_equal "word", decoder.decode("1011101110001110111011100010111010001110101")
  end

  def test_decoder_can_handle_more_complex_words
    decoder = ParaMorse::Decoder.new
    word = "11101110001000111000101110001011101010001011101010001010001110101110100010111000!"
    expected = "metallica!"
    actual = decoder.decode(word)

    assert_equal expected, actual
  end

  def test_decoder_splits_morse_with_multiple_words
    decoder = ParaMorse::Decoder.new
    words = "1011101110100010100011101000111010111000000010101110100010111010100011101110111000111010111011100011101010000000"
    expected = ["1011101110100010100011101000111010111","0000000","1010111010001011101010001110111011100011101011101110001110101","0000000"]
    actual = decoder.split_morse_words(words)

    assert_equal expected, actual
  end

  def test_decoder_splits_morse_with_spec_chars
    decoder = ParaMorse::Decoder.new
    words = "101110111000100010111010100011101011101000111011101110001110111000100011101110101011101110000000111011100011101011101110000000101011101000101110100010100010001110100011101010001110111010101110111000000010111011100010001011101010001110101110100011101110111000111011100010000000111000111011101110000000111000101010100010000000111011100010111000111010111010001010101000101000111010001000!0000000"
    expected = ["10111011100010001011101010001110101110100011101110111000111011100010001110111010101110111", "0000000", "11101110001110101110111", "0000000", "101011101000101110100010100010001110100011101010001110111010101110111", "0000000", "1011101110001000101110101000111010111010001110111011100011101110001", "0000000", "11100011101110111", "0000000", "11100010101010001", "0000000", "111011100010111000111010111010001010101000101000111010001000!", "0000000"]
    actual = decoder.split_morse_words(words)

    assert_equal expected, actual
  end

  def test_decoder_can_decode_two_words
    decoder = ParaMorse::Decoder.new
    words = "1011101110100010100011101000111010111000000010101110100010111010100011101110111000111010111011100011101010000000"
    expected = "pink floyd "
    actual = decoder.decode(words)

    assert_equal expected, actual
  end

  def test_decoder_can_handle_sentence_with_spec_chars
    decoder = ParaMorse::Decoder.new
    words = "101110111000100010111010100011101011101000111011101110001110111000100011101110101011101110000000111011100011101011101110000000101011101000101110100010100010001110100011101010001110111010101110111000000010111011100010001011101010001110101110100011101110111000111011100010000000111000111011101110000000111000101010100010000000111011100010111000111010111010001010101000101000111010001000!0000000"
    expected = "welcome, my friend, welcome to the machine! "
    actual = decoder.decode(words)

    assert_equal expected, actual
  end

end
